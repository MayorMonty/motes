import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef } from "react";
import { useLocalStorage } from "../utils/useLocalState";
import dynamic from "next/dynamic";

type Note = {
  id: string;
  contents: string;
  createdAt: number;
};

const Home: NextPage = dynamic(
  () =>
    Promise.resolve(() => {
      const input = useRef<HTMLInputElement>(null);
      const noteContainers = useRef<Record<string, HTMLDivElement | null>>({});

      const [notes, setNodes] = useLocalStorage<Note[]>("notes", []);

      useEffect(() => {
        function onKeyPress(event: KeyboardEvent) {
          // Press n to focus
          if (event.key === "n") {
            event.preventDefault();
            input.current?.focus();
          }
        }

        window.addEventListener("keydown", onKeyPress);
        return () => window.removeEventListener("keydown", onKeyPress);
      }, []);

      function onInputKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {
        event.stopPropagation();
        if (event.key === "Enter" && event.currentTarget.value) {
          const contents = event.currentTarget.value;
          setNodes((prev) => [
            ...prev,
            {
              id: Math.random().toString(36).slice(2, 9),
              contents,
              createdAt: Date.now(),
            },
          ]);
          event.currentTarget.value = "";
        }
      }

      function onNoteKeyDown(index: number) {
        return (event: React.KeyboardEvent<HTMLDivElement>) => {
          if (event.key === "d") {
            event.stopPropagation();

            const next = notes[index + 1];
            const previous = notes[index - 1];
            setNodes((prev) => prev.filter((_, i) => i !== index));

            // Using set timeout here to wait for the note to be removed from the dom and for react to
            // be rerendered.
            setTimeout(() => {
              if (next) {
                noteContainers.current[next.id]?.focus();
              } else if (previous) {
                noteContainers.current[previous.id]?.focus();
              } else {
                input.current?.focus();
              }
            }, 0);
          } else if (event.key === "t") {
            event.stopPropagation();
          } else if (event.key === "ArrowDown") {
            event.stopPropagation();
            const next = notes[index + 1];
            if (next) {
              noteContainers.current[next.id]?.focus();
            }
          } else if (event.key === "ArrowUp") {
            event.stopPropagation();
            const previous = notes[index - 1];
            if (previous) {
              noteContainers.current[previous.id]?.focus();
            }
          }
        };
      }

      return (
        <>
          <Head>
            <title>Motes</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
            <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
              <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                <span className="text-[hsl(280,100%,70%)]">MOTES</span>
              </h1>
              <main className="relative flex w-full flex-col gap-4 rounded-xl bg-white/10 p-4 text-white focus-within:border">
                <h1 className="text-lg">Create Note</h1>
                <input
                  ref={input}
                  onKeyDown={onInputKeyDown}
                  aria-label="Create Note. Press enter to create, and press n to focus this input."
                  className="rounded-lg bg-transparent font-mono text-2xl outline-none"
                  autoFocus
                ></input>
                <p className="right-4 text-sm text-white/50">
                  Press <code className="rounded-md px-2">n</code> to focus
                </p>
              </main>
              <section className="container flex flex-col gap-4" role="list">
                {notes.map((note, i) => (
                  <div
                    key={note.id}
                    ref={(el) => (noteContainers.current[note.id] = el)}
                    className="group flex items-center gap-4 rounded-lg bg-white/10 p-4 outline-none hover:shadow-lg focus:border"
                    tabIndex={0}
                    aria-label={`Note: ${note.contents} ${new Date(
                      note.createdAt
                    ).toLocaleTimeString()} Press d to delete, and press t to send to todoist. Use arrow keys or tab to navigate.`}
                    role="listitem"
                    onKeyDown={onNoteKeyDown(i)}
                  >
                    <p className="font-mono text-sm text-white text-opacity-75">
                      {new Date(note.createdAt).toLocaleTimeString()}
                    </p>
                    <p className="font-mono text-xl text-white outline-none ">
                      {note.contents}
                    </p>
                    <nav className="ml-auto opacity-0 transition-opacity group-focus-within:opacity-100 group-hover:opacity-100">
                      <button
                        className="mx-2 rounded-md border border-white/50 px-4 text-white"
                        tabIndex={-1}
                      >
                        <code className="rounded-md pr-2">d</code>
                        Delete
                      </button>
                      <button
                        className="mx-2 rounded-md border border-white/50 px-4 text-white"
                        tabIndex={-1}
                      >
                        <code className="rounded-md pr-2">t</code>
                        Todoist
                      </button>
                    </nav>
                  </div>
                ))}
              </section>
            </div>
          </main>
        </>
      );
    }),
  { ssr: false }
);

export default Home;
